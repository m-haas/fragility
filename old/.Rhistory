writeRaster(rate,'smoothed_seismicity_f',format='GTiff',overwrite=TRUE)
#Converts a csvfile to a raster
library(raster)
setwd("/home/mhaas/PhD/Routines/csv2raster/")
ls
data <- read.csv("hazard_map-poe_0.1-mean.csv")
data <- read.csv("hazard_map-poe_0.1-mean.csv",header=FALSE)
data <- read.csv("hazard_map-poe_0.1-mean.csv",sep=' ',header=FALSE)
ext=extent(c(min(data$V1),max(data$V1),min(data$V2),max(data$V2)))
ext
#Converts a csvfile to a raster
library(raster)
setwd("/home/mhaas/PhD/Routines/csv2raster/")
#Read in csv with 10^a values
data <- read.csv("smoothed_seismicity_f.csv")
crsys <- crs("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
ext=extent(c(min(data$Longitude),max(data$Longitude),min(data$Latitude),max(data$Latitude)))
df = data.frame(data$Longitude,data$Latitude,data$Smoothed.Rate)
rate=rasterFromXYZ(df,crs=crsys)
writeRaster(rate,'smoothed_seismicity_f',format='GTiff',overwrite=TRUE)
#Read in csv with hazard
data <- read.csv("hazard_map-poe_0.1-mean.csv",sep=' ',header=FALSE)
crsys <- crs("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
ext=extent(c(min(data$V1),max(data$V1),min(data$V2),max(data$V2)))
df = data.frame(data$V1,data$V2,data$V3)
haz=rasterFromXYZ(df,crs=crsys)
writeRaster(haz,'475y_hazard_map',format='GTiff',overwrite=TRUE)
df = data.frame(data$V1,data$V2,data$V3)
haz=rasterFromXYZ(df,crs=crsys)
library(automap)
install.packages('automap')
data(data)
data(df)
coords(df)=~ V1+V2
#Converts a csvfile to a raster
library(raster)
library(automap)
setwd("/home/mhaas/PhD/Routines/csv2raster/")
#Read in csv with 10^a values
data <- read.csv("smoothed_seismicity_f.csv")
crsys <- crs("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
ext<-extent(c(min(data$Longitude),max(data$Longitude),min(data$Latitude),max(data$Latitude)))
df <- data.frame(data$Longitude,data$Latitude,data$Smoothed.Rate)
rate<-rasterFromXYZ(df,crs=crsys)
writeRaster(rate,'smoothed_seismicity_f',format='GTiff',overwrite=TRUE)
#Read in csv with hazard
data <- read.csv("hazard_map-poe_0.1-mean.csv",sep=' ',header=FALSE)
crsys <- crs("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
ext<-extent(c(min(data$V1),max(data$V1),min(data$V2),max(data$V2)))
df <- data.frame(data$V1,data$V2,data$V3)
haz<-rasterFromXYZ(df,crs=crsys)
writeRaster(haz,'475y_hazard_map',format='GTiff',overwrite=TRUE)
coords(df)=~ V1+V2
loadMeuse
meuse
library(sp)
loadMeuse
demo(meuse)
meuse
??values
haz <- SpatialPoints(coords=df,proj4str=crsys,data=data.frame(data$V3))
haz <- SpatialPointsDataFrame(coords=df,proj4str=crsys,data=data.frame(data$V3))
haz
?autoKrige
?meuse.grid
?grid
??grid
?meuse.grid
head(meuse.grid)
meuse.grid
ext
ext$xmin
ext@xmin
nx=(ext@xmax-ext$xmin)/.1
ny=(ext@ymax-ext$ymin)/.1
nx=(ext@xmax-ext@xmin)/.1
ny=(ext@ymax-ext@ymin)/.1
nx
ny
nx=round((ext@xmax-ext@xmin)/.1)+1
ny=round((ext@ymax-ext@ymin)/.1)+1
nx
ny
GridTopology(c(ext@xmin,ext@ymin),c(0.1,0.1),nx*ny)
GridTopology(c(ext@xmin,ext@ymin),c(0.1,0.1),c(nx,ny))
grd <- SpatialGrid(gt,crsys)
gt <- GridTopology(c(ext@xmin,ext@ymin),c(0.1,0.1),c(nx,ny))
grd <- SpatialGrid(gt,crsys)
grd
haz_interpol <- autoKrige(data.V3 ~ 1,haz,grd)
SpatialGridDataFrame(gt,grd)
grd_df <- SpatialGridDataFrame(gt,haz,crsys)
grd_df <- SpatialGridDataFrame(gt,data.frame(data$V1,data$V2,data$V3),crsys)
df <- data.frame(data$V1,data$V2,data$V3)
coordinates(haz) <- ~V1+V2
#Read in csv with hazard
data <- read.csv("hazard_map-poe_0.1-mean.csv",sep=' ',header=FALSE)
crsys <- crs("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
ext<-extent(c(min(data$V1),max(data$V1),min(data$V2),max(data$V2)))
#get irregular values as Spatial Dataframe produced by OQ
df <- data.frame(data$V1,data$V2,data$V3)
coordinates(haz) <- ~V1+V2
haz <- data.frame(data$V1,data$V2,data$V3)
View(df)
data <- read.csv("hazard_map-poe_0.1-mean.csv",sep=' ',header=FALSE)
crsys <- crs("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
ext<-extent(c(min(data$V1),max(data$V1),min(data$V2),max(data$V2)))
#get irregular values as Spatial Dataframe produced by OQ
haz <- data.frame(data$V1,data$V2,data$V3)
coordinates(haz) <- ~V1+V2
coordinates(haz) <- ~data.V1+data.V2
gt <- GridTopology(c(ext@xmin,ext@ymin),c(0.1,0.1),c(nx,ny))
#grid
grd <- SpatialGrid(gt,crsys)
#nr of cells for new regular grid
nx <-round((ext@xmax-ext@xmin)/.1)+1
ny <- round((ext@ymax-ext@ymin)/.1)+1
#grid topology
gt <- GridTopology(c(ext@xmin,ext@ymin),c(0.1,0.1),c(nx,ny))
grd <- SpatialGrid(gt,crsys)
grd <- seq(from=ext@xmin,till=ext@xmax,0.1)
xgrd <- seq(from=round(ext@xmin),to=round(ext@xmax),0.1)
ygrd <- seq(from=round(ext@ymin),to=round(ext@ymax),0.1)
expand.grid(xgrd,ygrd)
68*93
int <- rep(0,length(grd))
length(grd)
summary(grd)
data <- read.csv("hazard_map-poe_0.1-mean.csv",sep=' ',header=FALSE)
crsys <- crs("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
ext<-extent(c(min(data$V1),max(data$V1),min(data$V2),max(data$V2)))
#get irregular values as Spatial Dataframe produced by OQ
haz <- data.frame(data$V1,data$V2,data$V3)
coordinates(haz) <- ~data.V1+data.V2
#haz <- SpatialPointsDataFrame(coords=df,proj4str=crsys,data=data.frame(data$V3))
#nr of cells for new regular grid
#grid
xgrd <- seq(from=round(ext@xmin),to=round(ext@xmax),0.1)
ygrd <- seq(from=round(ext@ymin),to=round(ext@ymax),0.1)
grd <- expand.grid(xgrd,ygrd)
ext@min
ext@xmin
xgrd <- seq(from=round(ext@xmin*10)/10,to=round(ext@xmax*10)/10,0.1)
ygrd <- seq(from=round(ext@ymin*10)/10,to=round(ext@ymax*10)/10,0.1)
grd <- expand.grid(xgrd,ygrd)
xgrd <- seq(from=floor(ext@xmin*10)/10,to=ceiling(ext@xmax*10)/10,0.1)
ygrd <- seq(from=floor(ext@ymin*10)/10,to=ceiling(ext@ymax*10)/10,0.1)
grd <- expand.grid(xgrd,ygrd)
ext
grd
haz_interpol <- data.frame(grd,int)
int <- rep(0,length(grd))
haz_interpol <- data.frame(grd,int)
data <- read.csv("hazard_map-poe_0.1-mean.csv",sep=' ',header=FALSE)
crsys <- crs("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
ext<-extent(c(min(data$V1),max(data$V1),min(data$V2),max(data$V2)))
#get irregular values as Spatial Dataframe produced by OQ
haz <- data.frame(data$V1,data$V2,data$V3)
coordinates(haz) <- ~data.V1+data.V2
#haz <- SpatialPointsDataFrame(coords=df,proj4str=crsys,data=data.frame(data$V3))
#nr of cells for new regular grid
#grid
xgrd <- seq(from=floor(ext@xmin*10)/10,to=ceiling(ext@xmax*10)/10,0.1)
ygrd <- seq(from=floor(ext@ymin*10)/10,to=ceiling(ext@ymax*10)/10,0.1)
grd <- expand.grid(xgrd,ygrd)
int <- rep(0,length(grd))
new_haz <- data.frame(grd,int)
coordinates(new_haz) <- ~Var1+Var2
autoKrige(data.V3~1,haz,new_haz)
#Read in csv with hazard
data <- read.csv("hazard_map-poe_0.1-mean.csv",sep=' ',header=FALSE)
crsys <- crs("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
ext<-extent(c(min(data$V1),max(data$V1),min(data$V2),max(data$V2)))
#get irregular values as Spatial Dataframe produced by OQ
haz <- data.frame(data$V1,data$V2,data$V3)
coordinates(haz) <- ~data.V1+data.V2
#haz <- SpatialPointsDataFrame(coords=df,proj4str=crsys,data=data.frame(data$V3))
#nr of cells for new regular grid
#grid
xgrd <- seq(from=floor(ext@xmin*10)/10,to=ceiling(ext@xmax*10)/10,0.1)
ygrd <- seq(from=floor(ext@ymin*10)/10,to=ceiling(ext@ymax*10)/10,0.1)
grd <- expand.grid(xgrd,ygrd)
int <- rep(0,length(grd))
new_haz <- data.frame(grd,int)
coordinates(new_haz) <- ~Var1+Var2
#Ordinary kriging
haz_interpol <- autoKrige(data.V3~1,haz,new_haz)
??interp2grid
install.packages('climates')
install.packages('climate')
install.packages('climates')
#Read in csv with hazard
data <- read.csv("hazard_map-poe_0.1-mean.csv",sep=' ',header=FALSE)
crsys <- crs("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
ext<-extent(c(min(data$V1),max(data$V1),min(data$V2),max(data$V2)))
#get irregular values as Spatial Dataframe produced by OQ
haz <- data.frame(data$V1,data$V2,data$V3)
coordinates(haz) <- ~data.V1+data.V2
#haz <- SpatialPointsDataFrame(coords=df,proj4str=crsys,data=data.frame(data$V3))
#nr of cells for new regular grid
#grid
xgrd <- seq(from=floor(ext@xmin*10)/10,to=ceiling(ext@xmax*10)/10,0.1)
ygrd <- seq(from=floor(ext@ymin*10)/10,to=ceiling(ext@ymax*10)/10,0.1)
grd <- expand.grid(xgrd,ygrd)
int <- rep(0,length(grd))
new_haz <- data.frame(grd,int)
coordinates(new_haz) <- ~Var1+Var2
#Ordinary kriging
haz_interpol <- autoKrige(data.V3~1,haz,new_haz)
haz_interpol@coords
haz_interpol$krige_output
out <- haz_iterpol$krige_output
haz_interpol
out <- haz_iterpol$krige_output
out <- haz_iterpol$krige_output
haz_interpol$krige_output
haz_interpol$krige_output@coords
haz_interpol$krige_output@coords[,1]
haz_interpol$krige_output@data$var1.pred
haz_out <- rasterFromXYZ(data.frame(haz_interpol$krige_output@coords[,1],haz_interpol$krige_output@coords[,2],haz_interpol$krige_output@data$var1.pred),crs=crsys)
writeRaster(haz_out,'475y_hazard_map',format='GTiff',overwrite=TRUE)
#Converts a csvfile to a raster
library(raster)
library(automap)
library(sp)
setwd("/home/mhaas/PhD/Routines/csv2raster/")
#Read in csv with 10^a values
data <- read.csv("smoothed_seismicity_f.csv")
crsys <- crs("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
ext<-extent(c(min(data$Longitude),max(data$Longitude),min(data$Latitude),max(data$Latitude)))
df <- data.frame(data$Longitude,data$Latitude,data$Smoothed.Rate)
rate<-rasterFromXYZ(df,crs=crsys)
writeRaster(rate,'smoothed_seismicity_f',format='GTiff',overwrite=TRUE)
#Read in csv with hazard
data <- read.csv("hazard_map-poe_0.1-mean.csv",sep=' ',header=FALSE)
crsys <- crs("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
ext<-extent(c(min(data$V1),max(data$V1),min(data$V2),max(data$V2)))
#get irregular values as Spatial Dataframe produced by OQ
haz <- data.frame(data$V1,data$V2,data$V3)
coordinates(haz) <- ~data.V1+data.V2
#haz <- SpatialPointsDataFrame(coords=df,proj4str=crsys,data=data.frame(data$V3))
#nr of cells for new regular grid
#grid
xgrd <- seq(from=floor(ext@xmin*10)/10,to=ceiling(ext@xmax*10)/10,0.1)
ygrd <- seq(from=floor(ext@ymin*10)/10,to=ceiling(ext@ymax*10)/10,0.1)
grd <- expand.grid(xgrd,ygrd)
int <- rep(0,length(grd))
new_haz <- data.frame(grd,int)
coordinates(new_haz) <- ~Var1+Var2
#Ordinary kriging
haz_interpol <- autoKrige(data.V3~1,haz,new_haz)
#create raster
haz_out <- rasterFromXYZ(data.frame(haz_interpol$krige_output@coords[,1],haz_interpol$krige_output@coords[,2],haz_interpol$krige_output@data$var1.pred),crs=crsys)
writeRaster(haz_out,'475y_hazard_map',format='GTiff',overwrite=TRUE)
view(grd)
View(grd)
#Read in csv with hazard
data <- read.csv("hazard_map-poe_0.1-mean.csv",sep=' ',header=FALSE)
crsys <- crs("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
ext<-extent(c(min(data$V1),max(data$V1),min(data$V2),max(data$V2)))
#Converts a csvfile to a raster
library(raster)
library(automap)
library(sp)
setwd("/home/mhaas/PhD/Routines/csv2raster/")
#Read in csv with 10^a values
data <- read.csv("smoothed_seismicity_f.csv")
crsys <- crs("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
ext<-extent(c(min(data$Longitude),max(data$Longitude),min(data$Latitude),max(data$Latitude)))
df <- data.frame(data$Longitude,data$Latitude,data$Smoothed.Rate)
rate<-rasterFromXYZ(df,crs=crsys)
writeRaster(rate,'smoothed_seismicity_f',format='GTiff',overwrite=TRUE)
#Read in csv with hazard
data <- read.csv("hazard_map-poe_0.1-mean.csv",sep=' ',header=FALSE)
crsys <- crs("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
ext<-extent(c(min(data$V1),max(data$V1),min(data$V2),max(data$V2)))
haz_out <- rasterFromXYZ(data.frame(data$V1,data$V2,data$V3),crs=crsys)
##FOR irregular grid
# #get irregular values as Spatial Dataframe produced by OQ
# haz <- data.frame(data$V1,data$V2,data$V3)
# coordinates(haz) <- ~data.V1+data.V2
# #haz <- SpatialPointsDataFrame(coords=df,proj4str=crsys,data=data.frame(data$V3))
# #nr of cells for new regular grid
# #grid
# xgrd <- seq(from=floor(ext@xmin*10)/10,to=ceiling(ext@xmax*10)/10,0.1)
# ygrd <- seq(from=floor(ext@ymin*10)/10,to=ceiling(ext@ymax*10)/10,0.1)
# grd <- expand.grid(xgrd,ygrd)
# int <- rep(0,length(grd))
# new_haz <- data.frame(grd,int)
# coordinates(new_haz) <- ~Var1+Var2
# #Ordinary kriging
# haz_interpol <- autoKrige(data.V3~1,haz,new_haz)
#
# #create raster
# haz_out <- rasterFromXYZ(data.frame(haz_interpol$krige_output@coords[,1],haz_interpol$krige_output@coords[,2],haz_interpol$krige_output@data$var1.pred),crs=crsys)
writeRaster(haz_out,'475y_hazard_map',format='GTiff',overwrite=TRUE)
#Converts a csvfile to a raster
library(raster)
library(automap)
library(sp)
setwd("/home/mhaas/PhD/Routines/csv2raster/")
#Read in csv with 10^a values
data <- read.csv("smoothed_seismicity_f.csv")
crsys <- crs("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
ext<-extent(c(min(data$Longitude),max(data$Longitude),min(data$Latitude),max(data$Latitude)))
df <- data.frame(data$Longitude,data$Latitude,data$Smoothed.Rate)
rate<-rasterFromXYZ(df,crs=crsys)
writeRaster(rate,'smoothed_seismicity_f',format='GTiff',overwrite=TRUE)
#Read in csv with hazard
data <- read.csv("hazard_map-poe_0.1-mean.csv",sep=' ',header=FALSE)
crsys <- crs("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
ext<-extent(c(min(data$V1),max(data$V1),min(data$V2),max(data$V2)))
haz_out <- rasterFromXYZ(data.frame(data$V1,data$V2,data$V3),crs=crsys)
##FOR irregular grid
# #get irregular values as Spatial Dataframe produced by OQ
# haz <- data.frame(data$V1,data$V2,data$V3)
# coordinates(haz) <- ~data.V1+data.V2
# #haz <- SpatialPointsDataFrame(coords=df,proj4str=crsys,data=data.frame(data$V3))
# #nr of cells for new regular grid
# #grid
# xgrd <- seq(from=floor(ext@xmin*10)/10,to=ceiling(ext@xmax*10)/10,0.1)
# ygrd <- seq(from=floor(ext@ymin*10)/10,to=ceiling(ext@ymax*10)/10,0.1)
# grd <- expand.grid(xgrd,ygrd)
# int <- rep(0,length(grd))
# new_haz <- data.frame(grd,int)
# coordinates(new_haz) <- ~Var1+Var2
# #Ordinary kriging
# haz_interpol <- autoKrige(data.V3~1,haz,new_haz)
#
# #create raster
# haz_out <- rasterFromXYZ(data.frame(haz_interpol$krige_output@coords[,1],haz_interpol$krige_output@coords[,2],haz_interpol$krige_output@data$var1.pred),crs=crsys)
writeRaster(haz_out,'475y_hazard_map',format='GTiff',overwrite=TRUE)
#plots fragility curves
library(ggplot2)
setwd("/home/mhaas/PhD/Routines/fragility/")
data <- read.csv("dg4.csv")
#plots fragility curves
library(ggplot2)
setwd("/home/mhaas/PhD/Routines/fragility/")
data <- read.csv("dg4.csv")
Intensity <- data.iml
bt_1and4 <- data.bt1and4
bt_2 <- data.bt2
bt_3and6 <- data.bt3and6
bt_5 <- data.bt5
Intensity <- data$iml
bt_1and4 <- data$bt1and4
bt_2 <- data$bt2
bt_3and6 <- data$bt3and6
bt_5 <- data$bt5
df <- data.frame(Intensity,bt_1and4,bt_2,bt_3and6,bt_5)
#plot data
df <- melt(df ,  id = 'Intensity', variable_name = 'Buildingtypes')
library(reshape)
df <- melt(df ,  id = 'Intensity', variable_name = 'Buildingtypes')
df
df <- data.frame(Intensity,bt_1and4,bt_2,bt_3and6,bt_5)
#plot data
df <- melt(df ,  id = 'Intensity', variable_name = 'Building types')
#plots fragility curves
library(ggplot2)
library(reshape)
setwd("/home/mhaas/PhD/Routines/fragility/")
data <- read.csv("dg4.csv")
Intensity <- data$iml
bt_1and4 <- data$bt1and4
bt_2 <- data$bt2
bt_3and6 <- data$bt3and6
bt_5 <- data$bt5
df <- data.frame(Intensity,bt_1and4,bt_2,bt_3and6,bt_5)
#plot data
df <- melt(df ,  id = 'Intensity', variable_name = 'Building types')
# plot on same grid, each series colored differently --
# good if the series have same scale
p <- ggplot(df, aes(Intensity,value)) + geom_line(aes(colour = Building types))
p + ylab("Probability of exceedance")
ggsave("fragility_curves.eps")
#plots fragility curves
library(ggplot2)
library(reshape)
setwd("/home/mhaas/PhD/Routines/fragility/")
data <- read.csv("dg4.csv")
Intensity <- data$iml
bt_1and4 <- data$bt1and4
bt_2 <- data$bt2
bt_3and6 <- data$bt3and6
bt_5 <- data$bt5
df <- data.frame(Intensity,bt_1and4,bt_2,bt_3and6,bt_5)
#plot data
df <- melt(df ,  id = 'Intensity', variable_name = 'Building types')
# plot on same grid, each series colored differently --
# good if the series have same scale
p <- ggplot2(df, aes(Intensity,value)) + geom_line(aes(colour = Building types))
p + ylab("Probability of exceedance")
ggsave("fragility_curves.eps")
p <- ggplot(df, aes(Intensity,value)) + geom_line(aes(colour = Building types))
p <- ggplot(df, aes(Intensity,value))
p + geom_line(aes(colour = Building types)) + ylab("Probability of exceedance")
#plot data
df <- melt(df ,  id = 'Intensity', variable_name = 'Buildingtypes')
# plot on same grid, each series colored differently --
# good if the series have same scale
p <- ggplot(df, aes(Intensity,value))
p + geom_line(aes(colour = Buildingtypes)) + ylab("Probability of exceedance")
df
setwd("/home/mhaas/PhD/Routines/fragility/")
data <- read.csv("dg4.csv")
Intensity <- data$iml
bt_1and4 <- data$bt1and4
bt_2 <- data$bt2
bt_3and6 <- data$bt3and6
bt_5 <- data$bt5
df <- data.frame(Intensity,bt_1and4,bt_2,bt_3and6,bt_5)
df
df <- melt(df ,  id = 'Intensity', variable_name = 'Buildingtypes')
df
p <- ggplot(df, aes(Intensity,value))
p + geom_line(aes(colour = Buildingtypes)) + ylab("Probability of exceedance")
#plots fragility curves
library(ggplot2)
library(reshape)
setwd("/home/mhaas/PhD/Routines/fragility/")
data <- read.csv("dg4.csv")
Intensity <- data$iml
bt_1and4 <- data$bt1and4
bt_2 <- data$bt2
bt_3and6 <- data$bt3and6
bt_5 <- data$bt5
df <- data.frame(Intensity,bt_1and4,bt_2,bt_3and6,bt_5)
#plot data
df <- melt(df ,  id = 'Intensity', variable_name = 'Buildingtypes')
# plot on same grid, each series colored differently --
# good if the series have same scale
theme_set(theme_gray(base_size = 18))
p <- ggplot(df, aes(Intensity,value))
p + geom_line(aes(colour = Buildingtypes)) + ylab("Probability of exceedance")
ggsave("fragility_curves.eps")
#plots fragility curves
library(ggplot2)
library(reshape)
setwd("/home/mhaas/PhD/Routines/fragility/")
data <- read.csv("dg4.csv")
Intensity <- data$iml
bt_1and4 <- data$bt1and4
bt_2 <- data$bt2
bt_3and6 <- data$bt3and6
bt_5 <- data$bt5
df <- data.frame(Intensity,bt_1and4,bt_2,bt_3and6,bt_5)
#plot data
df <- melt(df ,  id = 'Intensity', variable_name = 'Buildingtypes')
# plot on same grid, each series colored differently --
# good if the series have same scale
theme_set(theme_gray(base_size = 14))
p <- ggplot(df, aes(Intensity,value))
p + geom_line(aes(colour = Buildingtypes)) + ylab("Probability of exceedance")
ggsave("fragility_curves.eps")
#plots fragility curves
library(ggplot2)
library(reshape)
setwd("/home/mhaas/PhD/Routines/fragility/")
data <- read.csv("dg4.csv")
Intensity <- data$iml
bt_1and4 <- data$bt1and4
bt_2 <- data$bt2
bt_3and6 <- data$bt3and6
bt_5 <- data$bt5
df <- data.frame(Intensity,bt_1and4,bt_2,bt_3and6,bt_5)
#plot data
df <- melt(df ,  id = 'Intensity', variable_name = 'Buildingtypes')
# plot on same grid, each series colored differently --
# good if the series have same scale
theme_set(theme_gray(base_size = 14))
p <- ggplot(df, aes(Intensity,value))
p + geom_line(aes(colour = Buildingtypes)) + ylab("Probability of exceedance")
ggsave("fragility_curves.png")
#plots fragility curves
library(ggplot2)
library(reshape)
setwd("/home/mhaas/PhD/Routines/fragility/")
data <- read.csv("dg4.csv")
Intensity <- data$iml
bt_1and4 <- data$bt1and4
bt_2 <- data$bt2
bt_3and6 <- data$bt3and6
bt_5 <- data$bt5
df <- data.frame(Intensity,bt_1and4,bt_2,bt_3and6,bt_5)
#plot data
df <- melt(df ,  id = 'Intensity', variable_name = 'Buildingtypes')
# plot on same grid, each series colored differently --
# good if the series have same scale
theme_set(theme_gray(base_size = 14))
p <- ggplot(df, aes(Intensity,value))
p + geom_line(aes(colour = Buildingtypes)) + ylab("Probability of exceedance")
p
#plots fragility curves
library(ggplot2)
library(reshape)
setwd("/home/mhaas/PhD/Routines/fragility/")
data <- read.csv("dg4.csv")
Intensity <- data$iml
bt_1and4 <- data$bt1and4
bt_2 <- data$bt2
bt_3and6 <- data$bt3and6
bt_5 <- data$bt5
df <- data.frame(Intensity,bt_1and4,bt_2,bt_3and6,bt_5)
#plot data
df <- melt(df ,  id = 'Intensity', variable_name = 'Buildingtypes')
# plot on same grid, each series colored differently --
# good if the series have same scale
theme_set(theme_gray(base_size = 14))
p <- ggplot(df, aes(Intensity,value))
p + geom_line(aes(colour = Buildingtypes)) + ylab("Probability of exceedance")
